"""Configuration loading for the Telegram bot."""

from __future__ import annotations

import os
from dataclasses import dataclass
from typing import Optional

from dotenv import load_dotenv


DEFAULT_DO_API_BASE_URL = "https://api.digitalocean.com/v2/ai"


@dataclass(slots=True)
class BotConfig:
    """Runtime configuration for the Telegram bot.

    Attributes
    ----------
    telegram_bot_token:
        Token generated by BotFather for the Telegram bot.
    do_api_key:
        Personal access token for the DigitalOcean AI Agent API.
    do_agent_id:
        Identifier of the AI Agent instance to forward messages to.
    do_api_base_url:
        Optional override for the DigitalOcean API base URL.
    request_timeout:
        Timeout (seconds) for outbound HTTP requests.
    """

    telegram_bot_token: str
    do_api_key: str
    do_agent_id: str
    do_api_base_url: str = DEFAULT_DO_API_BASE_URL
    request_timeout: float = 30.0

    @classmethod
    def load(cls, env_path: Optional[str] = None) -> "BotConfig":
        """Load configuration from the process environment.

        Parameters
        ----------
        env_path:
            Optional path to a ``.env`` file. If provided, variables in the file
            will be loaded before reading from the environment.

        Returns
        -------
        BotConfig
            The populated configuration.

        Raises
        ------
        RuntimeError
            If any required configuration values are missing.
        """

        if env_path:
            load_dotenv(env_path)
        else:
            # Load from default .env if it exists.
            load_dotenv()

        token = os.getenv("TELEGRAM_BOT_TOKEN")
        api_key = os.getenv("DO_API_KEY")
        agent_id = os.getenv("DO_AGENT_ID")
        base_url = os.getenv("DO_API_BASE_URL") or DEFAULT_DO_API_BASE_URL
        timeout_str = os.getenv("DO_API_TIMEOUT", "30")

        if not token:
            raise RuntimeError("TELEGRAM_BOT_TOKEN is not configured")
        if not api_key:
            raise RuntimeError("DO_API_KEY is not configured")
        if not agent_id:
            raise RuntimeError("DO_AGENT_ID is not configured")

        try:
            timeout = float(timeout_str)
        except ValueError as exc:
            raise RuntimeError("DO_API_TIMEOUT must be numeric") from exc

        return cls(
            telegram_bot_token=token,
            do_api_key=api_key,
            do_agent_id=agent_id,
            do_api_base_url=base_url,
            request_timeout=timeout,
        )
